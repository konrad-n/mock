name: SledzSpecke CI/CD

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  BACKEND_PATH: './SledzSpecke.WebApi'
  FRONTEND_PATH: './SledzSpecke-Frontend'

jobs:
  # Backend Tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sledzspecke_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.BACKEND_PATH }}
    
    - name: Build
      run: dotnet build --no-restore -c Release
      working-directory: ${{ env.BACKEND_PATH }}
    
    - name: Test
      id: backend-test
      run: dotnet test --no-build --verbosity normal -c Release --collect:"XPlat Code Coverage"
      working-directory: ${{ env.BACKEND_PATH }}
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=sledzspecke_test;Username=postgres;Password=postgres"
      continue-on-error: true
    
    - name: Check test results
      if: steps.backend-test.outcome == 'failure'
      run: |
        echo "Backend tests failed!"
        exit 1

  # Frontend Tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json
    
    - name: Install dependencies
      run: |
        echo "=== Pre-install directory structure ==="
        ls -la
        if [ -d "packages" ]; then
          echo "Packages found:"
          ls -la packages/
        else
          echo "ERROR: packages directory not found!"
          echo "Searching for packages:"
          find . -type d -name "packages" | head -10
        fi
        echo -e "\n=== Running npm ci ==="
        npm ci
        echo -e "\n=== Post-install check ==="
        npm list --depth=0 || true
      working-directory: ${{ env.FRONTEND_PATH }}
    
    - name: Lint
      run: npm run lint || true
      working-directory: ${{ env.FRONTEND_PATH }}
    
    - name: Type check
      run: npm run type-check || true
      working-directory: ${{ env.FRONTEND_PATH }}
    
    - name: Build
      run: |
        echo "=== Environment Info ==="
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        echo -e "\n=== Package.json contents ==="
        cat package.json | head -20
        
        echo -e "\n=== Checking for packages directory ==="
        if [ -d "packages" ]; then
          echo "Found packages directory:"
          ls -la packages/
          echo -e "\nPackage.json files in packages:"
          find packages -name "package.json" -type f
        else
          echo "No packages directory found"
        fi
        
        echo -e "\n=== Checking npm workspaces ==="
        npm config get workspaces || echo "No workspaces config"
        
        echo -e "\n=== Checking if packages exist after npm ci ==="
        if [ -d "packages" ]; then
          echo "Packages directory exists!"
          ls -la packages/
        else
          echo "ERROR: Packages directory still missing after npm ci"
        fi
        
        echo -e "\n=== Running build ==="
        npm run build --verbose
      working-directory: ${{ env.FRONTEND_PATH }}
      env:
        VITE_API_URL: https://api.sledzspecke.pl

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to VPS
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy Backend
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          # Backup current version
          if [ -d "/var/www/sledzspecke-api" ]; then
            sudo cp -r /var/www/sledzspecke-api /var/www/sledzspecke-api-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Clone or pull latest code
          if [ ! -d "/home/ubuntu/sledzspecke" ]; then
            cd /home/ubuntu
            git clone https://github.com/${{ github.repository }}.git sledzspecke
            cd sledzspecke
          else
            cd /home/ubuntu/sledzspecke
            git pull origin master
          fi
          
          # Build and deploy API
          cd SledzSpecke.WebApi
          dotnet restore
          dotnet publish -c Release -o /tmp/sledzspecke-api-new \
            --no-self-contained --runtime linux-x64 \
            src/SledzSpecke.Api/SledzSpecke.Api.csproj
          
          # Stop service
          sudo systemctl stop sledzspecke-api || true
          
          # Copy new files
          sudo mkdir -p /var/www/sledzspecke-api
          sudo rm -rf /var/www/sledzspecke-api/*
          sudo cp -r /tmp/sledzspecke-api-new/* /var/www/sledzspecke-api/
          sudo chown -R www-data:www-data /var/www/sledzspecke-api
          
          # Skip migrations for now - they hang the deployment
          # TODO: Fix migration script to run non-interactively
          # cd /var/www/sledzspecke-api
          # sudo -u www-data dotnet SledzSpecke.Api.dll --migrate || true
          
          # Start service
          sudo systemctl start sledzspecke-api
          
          # Cleanup
          rm -rf /tmp/sledzspecke-api-new
        EOF
    
    - name: Deploy Frontend
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          # Backup current version
          if [ -d "/var/www/sledzspecke-web/dist" ]; then
            sudo cp -r /var/www/sledzspecke-web /var/www/sledzspecke-web-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Ensure repo is cloned
          if [ ! -d "/home/ubuntu/sledzspecke" ]; then
            cd /home/ubuntu
            git clone https://github.com/${{ github.repository }}.git sledzspecke
          fi
          
          # Build frontend
          cd /home/ubuntu/sledzspecke/SledzSpecke-Frontend
          npm ci
          VITE_API_URL=https://api.sledzspecke.pl npm run build
          
          # Deploy frontend
          sudo mkdir -p /var/www/sledzspecke-web/dist
          sudo rm -rf /var/www/sledzspecke-web/dist/*
          sudo cp -r packages/web/dist/* /var/www/sledzspecke-web/dist/
          sudo chown -R www-data:www-data /var/www/sledzspecke-web
          
          # Reload nginx
          sudo nginx -t && sudo nginx -s reload
        EOF
    
    - name: Health Check
      run: |
        sleep 10
        # API health endpoint not implemented yet
        # curl -f https://api.sledzspecke.pl/health || exit 1
        curl -f https://sledzspecke.pl || exit 1
        echo "Frontend check passed!"
    
    - name: Cleanup SSH
      if: always()
      run: rm -rf ~/.ssh/id_rsa

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Similar steps as deploy but to staging environment
    - name: Deploy to Staging
      run: echo "Deploy to staging environment"

# Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "Deployment successful!"
          # Add Slack/Discord/Email notification here
        else
          echo "Deployment failed!"
          # Add failure notification here
        fi
  
  # Save logs to VPS
  save-logs:
    name: Save Build Logs
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan, deploy]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      continue-on-error: true
      
    - name: Collect job logs
      id: collect-logs
      uses: actions/github-script@v7
      with:
        script: |
          const run_id = context.runId;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          try {
            // Get workflow run
            const run = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id
            });
            
            // Get jobs for this run
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id
            });
            
            // Collect failed job details
            const failedJobs = {};
            for (const job of jobs.data.jobs) {
              if (job.conclusion === 'failure') {
                // Get failed steps
                const failedSteps = job.steps.filter(step => step.conclusion === 'failure');
                failedJobs[job.name] = {
                  status: job.conclusion,
                  started_at: job.started_at,
                  completed_at: job.completed_at,
                  failed_steps: failedSteps.map(step => ({
                    name: step.name,
                    conclusion: step.conclusion,
                    completed_at: step.completed_at
                  }))
                };
              }
            }
            
            core.setOutput('failed_jobs', JSON.stringify(failedJobs));
            core.setOutput('total_jobs', jobs.data.total_count);
          } catch (error) {
            console.error('Error collecting logs:', error);
            core.setOutput('failed_jobs', '{}');
          }
      
    - name: Send detailed logs to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          mkdir -p /var/log/github-actions/builds
          mkdir -p /var/log/github-actions/details
          
          # Zapisz szczegółowe informacje o buildzie
          cat > /var/log/github-actions/builds/build-${{ github.run_id }}-$(date +%Y%m%d-%H%M%S).json << 'EOF'
          {
            "run_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "commit_message": $(echo "${{ github.event.head_commit.message }}" | jq -Rs .),
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "timestamp": "$(date -Iseconds)",
            "workflow_name": "${{ github.workflow }}",
            "jobs": {
              "backend": {
                "status": "${{ needs.test-backend.result }}",
                "conclusion": "${{ needs.test-backend.outputs.conclusion || needs.test-backend.result }}"
              },
              "frontend": {
                "status": "${{ needs.test-frontend.result }}",
                "conclusion": "${{ needs.test-frontend.outputs.conclusion || needs.test-frontend.result }}"
              },
              "security": {
                "status": "${{ needs.security-scan.result }}",
                "conclusion": "${{ needs.security-scan.outputs.conclusion || needs.security-scan.result }}"
              },
              "deploy": {
                "status": "${{ needs.deploy.result }}",
                "conclusion": "${{ needs.deploy.outputs.conclusion || needs.deploy.result }}"
              }
            },
            "failed_job_details": ${{ steps.collect-logs.outputs.failed_jobs || '{}' }},
            "total_jobs": "${{ steps.collect-logs.outputs.total_jobs || '0' }}",
            "workflow_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          
          # Jeśli są błędy, zapisz dodatkowe szczegóły
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            cat > /var/log/github-actions/details/failure-${{ github.run_id }}-$(date +%Y%m%d-%H%M%S).log << 'EOF'
          === Build Failure Details ===
          Run ID: ${{ github.run_id }}
          Time: $(date)
          
          Failed Jobs:
          ${{ steps.collect-logs.outputs.failed_jobs }}
          
          Environment:
          - Runner OS: ${{ runner.os }}
          - Runner Arch: ${{ runner.arch }}
          
          Context:
          - Event: ${{ github.event_name }}
          - Actor: ${{ github.actor }}
          - Ref: ${{ github.ref }}
          - SHA: ${{ github.sha }}
          EOF
          fi
          
          # Pokaż ostatnie 5 buildów
          echo "=== Recent builds ==="
          ls -lt /var/log/github-actions/builds/ | head -6