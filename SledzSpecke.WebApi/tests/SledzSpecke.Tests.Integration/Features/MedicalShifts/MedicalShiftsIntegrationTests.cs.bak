using System.Net;
using System.Net.Http.Json;
using FluentAssertions;
using SledzSpecke.Application.Commands;
using SledzSpecke.Application.DTO;
using SledzSpecke.Application.Queries;
using SledzSpecke.Core.Entities;
using SledzSpecke.Core.Results;
using SledzSpecke.Tests.Common.Builders.Domain;
using SledzSpecke.Tests.Integration.Common;
using Microsoft.EntityFrameworkCore;
using Xunit;

namespace SledzSpecke.Tests.Integration.Features.MedicalShifts;

public class MedicalShiftsIntegrationTests : IntegrationTestBase
{
    public MedicalShiftsIntegrationTests(SledzSpeckeApiFactory factory) : base(factory)
    {
    }
    
    protected override async Task InitializeAsync()
    {
        await base.InitializeAsync();
        await SeedTestDataAsync();
    }
    
    private async Task SeedTestDataAsync()
    {
        // Create test user using builder
        var userBuilder = new UserBuilder()
            .AsCardiologyResident()
            .WithEmail("test.resident@kardiologia.pl");
        var user = userBuilder.Build();
        
        // Save user directly to DB (bypassing command for test setup)
        DbContext.Users.Add(user);
        await DbContext.SaveChangesAsync();
        
        // Create specialization
        var specialization = new SpecializationBuilder()
            .ForUser(user.Id)
            .AsCardiology()
            .WithSmkVersion("new")
            .Build();
        
        DbContext.Specializations.Add(specialization);
        await DbContext.SaveChangesAsync();
        
        // Create module
        var module = new ModuleBuilder()
            .ForSpecialization(specialization.Id)
            .AsBasicModule()
            .Build();
        
        DbContext.Modules.Add(module);
        await DbContext.SaveChangesAsync();
        
        // Create internship
        var internship = new InternshipBuilder()
            .ForModule(module.Id)
            .AtHospital("Szpital Uniwersytecki w Krakowie")
            .InDepartment("Oddział Kardiologii")
            .Build();
        
        DbContext.Internships.Add(internship);
        await DbContext.SaveChangesAsync();
    }
    
    [Fact]
    public async Task AddMedicalShift_ValidData_ReturnsCreatedShift()
    {
        // Arrange
        var command = new AddMedicalShift(
            InternshipId: 1,
            Date: DateTime.Today,
            Hours: 8,
            Minutes: 0,
            Type: "Oddział"
        );
        
        // Act
        var result = await Mediator.Send(command);
        
        // Assert
        result.Should().BeGreaterThan(0);
        
        var shift = await DbContext.MedicalShifts.FindAsync(result);
        shift.Should().NotBeNull();
        shift!.InternshipId.Should().Be(1);
        shift.Hours.Should().Be(8);
        shift.Type.Should().Be("Oddział");
    }
    
    [Fact]
    public async Task AddMedicalShift_DuplicateDate_ShouldFail()
    {
        // Arrange - Add existing shift
        var existingShift = new MedicalShiftBuilder()
            .WithInternship(1)
            .WithDate(DateTime.Today)
            .Build();
        
        DbContext.MedicalShifts.Add(existingShift);
        await DbContext.SaveChangesAsync();
        
        var command = new AddMedicalShift(
            InternshipId: 1,
            Date: DateTime.Today,
            Hours: 8,
            Minutes: 0,
            Type: "Oddział"
        );
        
        // Act & Assert
        await Assert.ThrowsAsync<InvalidOperationException>(async () => 
            await Mediator.Send(command));
    }
    
    [Fact]
    public async Task GetMedicalShifts_ReturnsUserShifts()
    {
        // Arrange - Create multiple shifts
        var shifts = new MedicalShiftBuilder()
            .BuildMonthlyRotation(DateTime.Today.Year, DateTime.Today.Month, 1);
        
        foreach (var shift in shifts)
        {
            DbContext.MedicalShifts.Add(shift);
        }
        await DbContext.SaveChangesAsync();
        
        var query = new GetMedicalShifts(1); // UserId = 1
        
        // Act
        var result = await Mediator.Send(query);
        
        // Assert
        result.Should().NotBeEmpty();
        result.Should().HaveCountGreaterThan(15); // At least 15 working days
        result.All(s => s.InternshipId == 1).Should().BeTrue();
    }
    
    [Fact]
    public async Task UpdateMedicalShift_ValidData_UpdatesSuccessfully()
    {
        // Arrange
        var shift = new MedicalShiftBuilder()
            .WithInternship(1)
            .WithDate(DateTime.Today)
            .WithDuration(8, 0)
            .Build();
        
        DbContext.MedicalShifts.Add(shift);
        await DbContext.SaveChangesAsync();
        
        var command = new UpdateMedicalShift(
            Id: shift.Id,
            Hours: 10,
            Minutes: 30,
            Type: "Dyżur"
        );
        
        // Act
        await Mediator.Send(command);
        
        // Assert
        var updatedShift = await DbContext.MedicalShifts.FindAsync(shift.Id);
        updatedShift.Should().NotBeNull();
        updatedShift!.Hours.Should().Be(10);
        updatedShift.Minutes.Should().Be(30);
        updatedShift.Type.Should().Be("Dyżur");
    }
    
    [Fact]
    public async Task DeleteMedicalShift_ExistingShift_RemovesSuccessfully()
    {
        // Arrange
        var shift = new MedicalShiftBuilder()
            .WithInternship(1)
            .WithDate(DateTime.Today)
            .Build();
        
        DbContext.MedicalShifts.Add(shift);
        await DbContext.SaveChangesAsync();
        
        var command = new DeleteMedicalShift(shift.Id);
        
        // Act
        await Mediator.Send(command);
        
        // Assert
        var deletedShift = await DbContext.MedicalShifts.FindAsync(shift.Id);
        deletedShift.Should().BeNull();
    }
    
    [Fact]
    public async Task GetMedicalShiftStatistics_ReturnsCorrectSummary()
    {
        // Arrange - Create varied shifts
        var builder = new MedicalShiftBuilder();
        
        // Regular shifts
        for (int i = 0; i < 10; i++)
        {
            var shift = builder
                .WithInternship(1)
                .WithDate(DateTime.Today.AddDays(-i))
                .WithDuration(8, 0)
                .WithId(i + 1)
                .Build();
            DbContext.MedicalShifts.Add(shift);
        }
        
        // Night shifts
        for (int i = 10; i < 15; i++)
        {
            var nightShift = new MedicalShiftBuilder()
                .WithInternship(1)
                .WithDate(DateTime.Today.AddDays(-i))
                .AsNightShift()
                .WithId(i + 1)
                .Build();
            DbContext.MedicalShifts.Add(nightShift);
        }
        
        await DbContext.SaveChangesAsync();
        
        var query = new GetMedicalShiftStatistics(1); // UserId = 1
        
        // Act
        var result = await Mediator.Send(query);
        
        // Assert
        result.Should().NotBeNull();
        result.TotalShifts.Should().Be(15);
        result.TotalHours.Should().Be(140); // 10*8 + 5*12
        result.NightShifts.Should().Be(5);
    }
    
    [Fact]
    public async Task MedicalShift_PolishContext_HandlesCorrectly()
    {
        // Arrange - Test Polish-specific data
        var polishHospitals = new[]
        {
            "Szpital Uniwersytecki w Krakowie",
            "Centrum Zdrowia Dziecka w Warszawie",
            "Wojewódzki Szpital Specjalistyczny im. M. Kopernika w Łodzi"
        };
        
        foreach (var (hospital, index) in polishHospitals.Select((h, i) => (h, i)))
        {
            var shift = new MedicalShiftBuilder()
                .WithInternship(1)
                .WithDate(DateTime.Today.AddDays(-index))
                .WithId(index + 100)
                .Build();
            
            shift.Location = hospital;
            DbContext.MedicalShifts.Add(shift);
        }
        
        await DbContext.SaveChangesAsync();
        
        // Act
        var shifts = await DbContext.MedicalShifts
            .Where(s => s.InternshipId == 1)
            .ToListAsync();
        
        // Assert
        shifts.Should().Contain(s => polishHospitals.Contains(s.Location));
    }
}