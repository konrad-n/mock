// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SledzSpecke.Infrastructure.DAL;

#nullable disable

namespace SledzSpecke.Infrastructure.Migrations
{
    [DbContext(typeof(SledzSpeckeDbContext))]
    partial class SledzSpeckeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SledzSpecke.Core.Auditing.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLogs_Action");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_Entity");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Absence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalFields")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NotSynced");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "StartDate", "EndDate");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.AdditionalSelfEducationDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InternshipId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer");

                    b.Property<string>("Organizer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId")
                        .HasDatabaseName("IX_AdditionalSelfEducationDays_InternshipId");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("IX_AdditionalSelfEducationDays_ModuleId");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_AdditionalSelfEducationDays_Dates");

                    b.ToTable("AdditionalSelfEducationDays", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CmkpCertificateNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CmkpVerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("CourseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<int>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("boolean");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerifiedByCmkp")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompletionDate");

                    b.HasIndex("CourseType");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.EducationalActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("Type");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("EducationalActivities");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.FileMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("UploadedByUserId")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("EntityType", "EntityId")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("FileMetadata");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Internship", b =>
                {
                    b.Property<int>("InternshipId")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CompletedDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DaysCount")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlannedDays")
                        .HasColumnType("integer");

                    b.Property<int>("PlannedWeeks")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InternshipId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Internships");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.MedicalShift", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AdditionalFields")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApproverRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InternshipId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("SupervisorName")
                        .HasColumnType("text");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("InternshipId");

                    b.HasIndex("ModuleId");

                    b.ToTable("MedicalShifts");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedCourses")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedInternships")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedProceduresA")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedProceduresB")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedSelfEducationDays")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedShiftHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RequiredShiftHours")
                        .HasColumnType("integer");

                    b.Property<string>("SmkVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("integer");

                    b.Property<int>("TotalInternships")
                        .HasColumnType("integer");

                    b.Property<int>("TotalProceduresA")
                        .HasColumnType("integer");

                    b.Property<int>("TotalProceduresB")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSelfEducationDays")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WeeklyShiftHours")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureBase", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AdditionalFields")
                        .HasColumnType("text");

                    b.Property<string>("AssistantData")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("ExecutionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("InternshipId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<char?>("PatientGender")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("PatientInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PatientInitials")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("PerformedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PerformingPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProcedureGroup")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SmkVersion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SupervisorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Date");

                    b.HasIndex("InternshipId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Procedures", (string)null);

                    b.HasDiscriminator().HasValue("ProcedureBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureRealization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("RequirementId");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("RequirementId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "RequirementId", "Date");

                    b.ToTable("ProcedureRealizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProcedureRealizations_Year", "\"Year\" IS NULL OR (\"Year\" >= 1 AND \"Year\" <= 6)");
                        });
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("ModuleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RequiredAsAssistant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("RequiredAsOperator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ModuleId", "Code")
                        .IsUnique();

                    b.ToTable("ProcedureRequirements", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Abstract")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("AdditionalFields")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Authors")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DOI")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("ImpactFactor")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCorrespondingAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFirstAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPeerReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Issue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Journal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Keywords")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PMID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Pages")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NotSynced");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Volume")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsFirstAuthor");

                    b.HasIndex("IsPeerReviewed");

                    b.HasIndex("PublicationDate");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "SpecializationId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Recognition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalFields")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DaysReduction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Institution")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NotSynced");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsApproved");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "SpecializationId");

                    b.ToTable("Recognitions");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.SelfEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPeerReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("JournalName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicationTitle")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NotSynced");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Type");

                    b.ToTable("SelfEducations");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("BasicModuleCompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CalculatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("DurationYears")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBasicModule")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpecializedModule")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlannedPesYear")
                        .HasColumnType("integer");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProgramStructure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProgramVariant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SmkVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailNotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SledzSpecke.Core.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("ProcessedAt")
                        .HasFilter("\"ProcessedAt\" IS NULL");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Core.SpecializationTemplates.SpecializationTemplateDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("JsonContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_SpecializationTemplate_IsActive");

                    b.HasIndex("Code", "Version")
                        .IsUnique()
                        .HasDatabaseName("UQ_SpecializationTemplate_Code_Version");

                    b.ToTable("SpecializationTemplates", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Infrastructure.Sagas.SagaStateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("SagaStates", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Infrastructure.Sagas.SagaStepEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("SagaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("SagaId", "Name");

                    b.ToTable("SagaSteps", (string)null);
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Procedure", b =>
                {
                    b.HasBaseType("SledzSpecke.Core.Entities.ProcedureBase");

                    b.HasDiscriminator().HasValue("Procedure");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureNewSmk", b =>
                {
                    b.HasBaseType("SledzSpecke.Core.Entities.ProcedureBase");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("CountA")
                        .HasColumnType("integer");

                    b.Property<int>("CountB")
                        .HasColumnType("integer");

                    b.Property<string>("Institution")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProcedureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProcedureRequirementId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredCountCodeA")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredCountCodeB")
                        .HasColumnType("integer");

                    b.Property<string>("Supervisor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("ProcedureNewSmk");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureOldSmk", b =>
                {
                    b.HasBaseType("SledzSpecke.Core.Entities.ProcedureBase");

                    b.Property<string>("InternshipName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ProcedureRequirementId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredCountCodeA")
                        .HasColumnType("integer");

                    b.ToTable("Procedures", t =>
                        {
                            t.Property("ProcedureRequirementId")
                                .HasColumnName("ProcedureOldSmk_ProcedureRequirementId");

                            t.Property("RequiredCountCodeA")
                                .HasColumnName("ProcedureOldSmk_RequiredCountCodeA");
                        });

                    b.HasDiscriminator().HasValue("ProcedureOldSmk");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Course", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Module", "Module")
                        .WithMany("Courses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Internship", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Module", null)
                        .WithMany("Internships")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.MedicalShift", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Internship", null)
                        .WithMany("MedicalShifts")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SledzSpecke.Core.Entities.Module", null)
                        .WithMany("MedicalShifts")
                        .HasForeignKey("ModuleId");

                    b.OwnsOne("SledzSpecke.Core.ValueObjects.ShiftDuration", "Duration", b1 =>
                        {
                            b1.Property<int>("MedicalShiftId")
                                .HasColumnType("integer");

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("Hours");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("Minutes");

                            b1.HasKey("MedicalShiftId");

                            b1.ToTable("MedicalShifts");

                            b1.WithOwner()
                                .HasForeignKey("MedicalShiftId");
                        });

                    b.Navigation("Duration")
                        .IsRequired();
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Module", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Specialization", null)
                        .WithMany("Modules")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureBase", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Internship", null)
                        .WithMany("Procedures")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SledzSpecke.Core.Entities.Module", "Module")
                        .WithMany("Procedures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureRealization", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.ProcedureRequirement", "Requirement")
                        .WithMany("Realizations")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SledzSpecke.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureRequirement", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.SelfEducation", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Module", "Module")
                        .WithMany("SelfEducations")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.User", b =>
                {
                    b.OwnsOne("SledzSpecke.Core.ValueObjects.Address", "CorrespondenceAddress", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("ApartmentNumber")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("CorrespondenceAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("SledzSpecke.Infrastructure.Sagas.SagaStepEntity", b =>
                {
                    b.HasOne("SledzSpecke.Infrastructure.Sagas.SagaStateEntity", "Saga")
                        .WithMany("Steps")
                        .HasForeignKey("SagaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Saga");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Internship", b =>
                {
                    b.Navigation("MedicalShifts");

                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Module", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Internships");

                    b.Navigation("MedicalShifts");

                    b.Navigation("Procedures");

                    b.Navigation("SelfEducations");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.ProcedureRequirement", b =>
                {
                    b.Navigation("Realizations");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Specialization", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("SledzSpecke.Infrastructure.Sagas.SagaStateEntity", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
