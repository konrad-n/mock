// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SledzSpecke.Infrastructure.DAL;

#nullable disable

namespace SledzSpecke.Infrastructure.Migrations
{
    [DbContext(typeof(SledzSpeckeDbContext))]
    [Migration("20250612164529_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SledzSpecke.Core.Entities.MedicalShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalFields")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApproverRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<int>("InternshipId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("InternshipId");

                    b.ToTable("MedicalShifts");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedCourses")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedInternships")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedProceduresA")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedProceduresB")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedSelfEducationDays")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedShiftHours")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RequiredShiftHours")
                        .HasColumnType("integer");

                    b.Property<int>("SmkVersion")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("integer");

                    b.Property<int>("TotalInternships")
                        .HasColumnType("integer");

                    b.Property<int>("TotalProceduresA")
                        .HasColumnType("integer");

                    b.Property<int>("TotalProceduresB")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSelfEducationDays")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WeeklyShiftHours")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalFields")
                        .HasColumnType("text");

                    b.Property<string>("AssistantData")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InternshipId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatorCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<char?>("PatientGender")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("PatientInitials")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PerformingPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProcedureGroup")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Date");

                    b.HasIndex("InternshipId");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CalculatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("DurationYears")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProgramStructure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SmkVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SmkVersion")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SledzSpecke.Core.Entities.Module", b =>
                {
                    b.HasOne("SledzSpecke.Core.Entities.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
