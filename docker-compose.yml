version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sledzspecke-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: sledzspecke_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SledzSpecke123!}
      POSTGRES_DB: sledzspecke_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sledzspecke_user -d sledzspecke_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sledzspecke-network

  # .NET API
  api:
    build:
      context: ./SledzSpecke.WebApi
      dockerfile: Dockerfile
    container_name: sledzspecke-api
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:5000
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=sledzspecke_db;Username=sledzspecke_user;Password=${DB_PASSWORD:-SledzSpecke123!}"
      Jwt__Secret: ${JWT_SECRET:-YourSuperSecretKeyThatShouldBeAtLeast32CharactersLong}
      Jwt__Issuer: "SledzSpecke"
      Jwt__Audience: "SledzSpeckeUsers"
      Seq__ServerUrl: "http://seq:5341"
    depends_on:
      postgres:
        condition: service_healthy
      seq:
        condition: service_started
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    networks:
      - sledzspecke-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./SledzSpecke-Frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${FRONTEND_API_URL:-http://localhost:5000}
    container_name: sledzspecke-web
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - sledzspecke-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sledzspecke-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
      - frontend
    networks:
      - sledzspecke-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: sledzspecke-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - sledzspecke-network

  # Seq for centralized logging
  seq:
    image: datalust/seq:latest
    container_name: sledzspecke-seq
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
    ports:
      - "5341:80"
    volumes:
      - seq_data:/data
    networks:
      - sledzspecke-network

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: sledzspecke-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sledzspecke-network
    command: redis-server --appendonly yes

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sledzspecke-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - sledzspecke-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sledzspecke-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - sledzspecke-network

  # PostgreSQL Backup Service
  postgres-backup:
    image: postgres:16-alpine
    container_name: sledzspecke-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-SledzSpecke123!}
    volumes:
      - ./backup:/backup
      - ./scripts/backup-database.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - sledzspecke-network
    entrypoint: ["/bin/sh", "-c"]
    command: 
      - |
        echo "0 2 * * * /backup.sh" > /etc/crontabs/root
        crond -f

volumes:
  postgres_data:
    driver: local
  seq_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sledzspecke-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16